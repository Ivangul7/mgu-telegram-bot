import telebot
from telebot import types
import os
from datetime import datetime
import threading
import time

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get('BOT_TOKEN')

if not TOKEN:
    print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
    exit()

bot = telebot.TeleBot(TOKEN)

# –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ú–ì–£ —é—Ä—Ñ–∞–∫–∞
schedule_data = {
    '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': [
        {'time': '9:00-10:30', 'subject': '–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ', 'professor': '–ø—Ä–æ—Ñ. –ò–≤–∞–Ω–æ–≤ –ê.–ò.', 'room': '–∞—É–¥. 826'},
        {'time': '10:40-12:10', 'subject': '–ò—Å—Ç–æ—Ä–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –∏ –ø—Ä–∞–≤–∞', 'professor': '–¥–æ—Ü. –ü–µ—Ç—Ä–æ–≤ –í.–°.', 'room': '–∞—É–¥. 523'},
        {'time': '12:20-13:50', 'subject': '–õ–æ–≥–∏–∫–∞', 'professor': '–¥–æ—Ü. –°–∏–¥–æ—Ä–æ–≤ –ú.–ü.', 'room': '–∞—É–¥. 301'}
    ],
    '–≤—Ç–æ—Ä–Ω–∏–∫': [
        {'time': '9:00-10:30', 'subject': '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ', 'professor': '–ø—Ä–æ—Ñ. –ö–æ–∑–ª–æ–≤ –ù.–í.', 'room': '–∞—É–¥. 745'},
        {'time': '10:40-12:10', 'subject': '–õ–∞—Ç–∏–Ω—Å–∫–∏–π —è–∑—ã–∫', 'professor': '—Å—Ç. –ø—Ä–µ–ø. –ú–æ—Ä–æ–∑–æ–≤–∞ –ï.–ê.', 'room': '–∞—É–¥. 425'},
        {'time': '14:00-15:30', 'subject': '–¢–µ–æ—Ä–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –∏ –ø—Ä–∞–≤–∞', 'professor': '–ø—Ä–æ—Ñ. –í–æ–ª–∫–æ–≤ –ò.–ò.', 'room': '–∞—É–¥. 623'}
    ],
    '—Å—Ä–µ–¥–∞': [
        {'time': '9:00-10:30', 'subject': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ', 'professor': '–¥–æ—Ü. –û—Ä–ª–æ–≤–∞ –°.–í.', 'room': '–∞—É–¥. 512'},
        {'time': '12:20-13:50', 'subject': '–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ', 'professor': '–ø—Ä–æ—Ñ. –ò–≤–∞–Ω–æ–≤ –ê.–ò.', 'room': '–∞—É–¥. 826'}
    ],
    '—á–µ—Ç–≤–µ—Ä–≥': [
        {'time': '10:40-12:10', 'subject': '–ò—Å—Ç–æ—Ä–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –∏ –ø—Ä–∞–≤–∞', 'professor': '–¥–æ—Ü. –ü–µ—Ç—Ä–æ–≤ –í.–°.', 'room': '–∞—É–¥. 523'},
        {'time': '12:20-13:50', 'subject': '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ', 'professor': '–ø—Ä–æ—Ñ. –ö–æ–∑–ª–æ–≤ –ù.–í.', 'room': '–∞—É–¥. 745'},
        {'time': '14:00-15:30', 'subject': '–ü—Ä–∞–≤–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', 'professor': '—Å—Ç. –ø—Ä–µ–ø. –ë–µ–ª–æ–≤–∞ –ê.–ú.', 'room': '–∫–æ–º–ø. –∫–ª–∞—Å—Å'}
    ],
    '–ø—è—Ç–Ω–∏—Ü–∞': [
        {'time': '9:00-10:30', 'subject': '–¢–µ–æ—Ä–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –∏ –ø—Ä–∞–≤–∞', 'professor': '–ø—Ä–æ—Ñ. –í–æ–ª–∫–æ–≤ –ò.–ò.', 'room': '–∞—É–¥. 623'},
        {'time': '10:40-12:10', 'subject': '–õ–∞—Ç–∏–Ω—Å–∫–∏–π —è–∑—ã–∫', 'professor': '—Å—Ç. –ø—Ä–µ–ø. –ú–æ—Ä–æ–∑–æ–≤–∞ –ï.–ê.', 'room': '–∞—É–¥. 425'}
    ]
}

# –ü—Ä–∏–º–µ—Ä –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
sample_assignments = [
    {'id': 1, 'subject': '–ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ', 'title': '–≠—Å—Å–µ "–ü—Ä–∏–Ω—Ü–∏–ø—ã –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–æ—è –†–§"', 'deadline': '25.09.2025'},
    {'id': 2, 'subject': '–ò—Å—Ç–æ—Ä–∏—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞ –∏ –ø—Ä–∞–≤–∞', 'title': '–†–µ—Ñ–µ—Ä–∞—Ç "–†—É—Å—Å–∫–∞—è –ü—Ä–∞–≤–¥–∞"', 'deadline': '30.09.2025'},
    {'id': 3, 'subject': '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–µ –ø—Ä–∞–≤–æ', 'title': '–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Ç–µ–º–∞–º 1-3', 'deadline': '22.09.2025'}
]

user_data = {}

def create_main_menu():
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule')
    btn2 = types.InlineKeyboardButton('üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', callback_data='assignments')
    btn3 = types.InlineKeyboardButton('üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data='notifications')
    btn4 = types.InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data='settings')
    btn5 = types.InlineKeyboardButton('‚ÑπÔ∏è –û –±–æ—Ç–µ', callback_data='about')
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5)
    return markup

def create_schedule_menu():
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton('üìÖ –°–µ–≥–æ–¥–Ω—è', callback_data='today')
    btn2 = types.InlineKeyboardButton('üìÖ –ó–∞–≤—Ç—Ä–∞', callback_data='tomorrow')
    btn3 = types.InlineKeyboardButton('üìÖ –ù–µ–¥–µ–ª—è', callback_data='week')
    btn4 = types.InlineKeyboardButton('üë®‚Äçüè´ –ü–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é', callback_data='by_teacher')
    btn5 = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='main')
    markup.add(btn1, btn2)
    markup.add(btn3, btn4)
    markup.add(btn5)
    return markup

def create_assignments_menu():
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton('üìã –ê–∫—Ç–∏–≤–Ω—ã–µ', callback_data='active_assignments')
    btn2 = types.InlineKeyboardButton('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ', callback_data='completed_assignments')
    btn3 = types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å', callback_data='add_assignment')
    btn4 = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='main')
    markup.add(btn1, btn2)
    markup.add(btn3)
    markup.add(btn4)
    return markup

@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    user_data[user_id] = {'group': '101', 'course': 1}
    
    welcome_text = f"üéì –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
    welcome_text += "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—á–µ–±–µ –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –ú–ì–£ –∏–º. –ú.–í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞!\n\n"
    welcome_text += "–ü–æ–º–æ–≥—É —Ç–µ–±–µ —Å:\n"
    welcome_text += "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏–π\n"
    welcome_text += "üìö –î–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏\n"
    welcome_text += "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ –ø–∞—Ä–∞—Ö\n"
    welcome_text += "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
    welcome_text += "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá"
    
    bot.send_message(message.chat.id, welcome_text, reply_markup=create_main_menu())

@bot.message_handler(commands=['help'])
def help_message(message):
    help_text = """
ü§ñ **–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:**

üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:**
‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞
‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é

üìö **–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:**
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
‚Ä¢ –û—Ç–º–µ—Ç–∫–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –£–∫–∞–∑–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
‚Ä¢ –í—ã–±–æ—Ä –∫—É—Ä—Å–∞
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è

‚ùì **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/schedule - –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    """
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    try:
        if call.data == 'main':
            bot.edit_message_text(
                "üéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_main_menu()
            )
        
        elif call.data == 'schedule':
            bot.edit_message_text(
                "üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π**\n\n–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_schedule_menu(),
                parse_mode='Markdown'
            )
        
        elif call.data == 'today':
            show_schedule_for_day(call, '—Å–µ–≥–æ–¥–Ω—è')
        
        elif call.data == 'tomorrow':
            show_schedule_for_day(call, '–∑–∞–≤—Ç—Ä–∞')
        
        elif call.data == 'week':
            show_week_schedule(call)
        
        elif call.data == 'assignments':
            bot.edit_message_text(
                "üìö **–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è**\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=create_assignments_menu(),
                parse_mode='Markdown'
            )
        
        elif call.data == 'active_assignments':
            show_assignments(call)
        
        elif call.data == 'notifications':
            show_notifications_menu(call)
        
        elif call.data == 'settings':
            show_settings_menu(call)
        
        elif call.data == 'about':
            show_about(call)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ callback: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

def show_schedule_for_day(call, day_type):
    today_num = datetime.now().weekday()
    day_names = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']
    
    if day_type == '–∑–∞–≤—Ç—Ä–∞':
        target_day = day_names[(today_num + 1) % 7]
    else:
        target_day = day_names[today_num]
    
    if target_day in schedule_data and today_num < 5:  # –ë—É–¥–Ω–∏
        schedule_text = f"üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day_type} ({target_day}):**\n\n"
        for lesson in schedule_data[target_day]:
            schedule_text += f"üïê **{lesson['time']}**\n"
            schedule_text += f"üìñ {lesson['subject']}\n"
            schedule_text += f"üë®‚Äçüè´ {lesson['professor']}\n"
            schedule_text += f"üè¢ {lesson['room']}\n\n"
    else:
        schedule_text = f"üìÖ –ù–∞ {day_type} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç! üéâ\n\n–ú–æ–∂–Ω–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏–ª–∏ –∑–∞–Ω—è—Ç—å—Å—è –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏ üìö"
    
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', callback_data='schedule')
    markup.add(btn)
    
    bot.edit_message_text(
        schedule_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode='Markdown'
    )

def show_week_schedule(call):
    schedule_text = "üìÖ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:**\n\n"
    
    for day, lessons in schedule_data.items():
        schedule_text += f"**{day.upper()}:**\n"
        if lessons:
            for lesson in lessons:
                schedule_text += f"‚Ä¢ {lesson['time']} - {lesson['subject']}\n"
        else:
            schedule_text += "‚Ä¢ –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n"
        schedule_text += "\n"
    
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é', callback_data='schedule')
    markup.add(btn)
    
    bot.edit_message_text(
        schedule_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode='Markdown'
    )

def show_assignments(call):
    assignments_text = "üìö **–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:**\n\n"
    
    for assignment in sample_assignments:
        assignments_text += f"üìñ **{assignment['subject']}**\n"
        assignments_text += f"üìù {assignment['title']}\n"
        assignments_text += f"üìÖ –°–¥–∞—Ç—å –¥–æ: {assignment['deadline']}\n\n"
    
    assignments_text += "üí° _–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å'_"
    
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∑–∞–¥–∞–Ω–∏—è–º', callback_data='assignments')
    markup.add(btn)
    
    bot.edit_message_text(
        assignments_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode='Markdown'
    )

def show_notifications_menu(call):
    notifications_text = "üîî **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**\n\n"
    notifications_text += "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–∞—Ä–∞—Ö: –í–∫–ª—é—á–µ–Ω—ã\n"
    notifications_text += "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö: –í–∫–ª—é—á–µ–Ω—ã\n"
    notifications_text += "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞: 30 –º–∏–Ω—É—Ç\n"
    notifications_text += "üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç—è—Ö: –í–∫–ª—é—á–µ–Ω—ã\n\n"
    notifications_text += "_–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'_"
    
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='main')
    markup.add(btn)
    
    bot.edit_message_text(
        notifications_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode='Markdown'
    )

def show_settings_menu(call):
    user_id = call.from_user.id
    user_info = user_data.get(user_id, {'group': '101', 'course': 1})
    
    settings_text = "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:**\n\n"
    settings_text += f"üë§ –ò–º—è: {call.from_user.first_name}\n"
    settings_text += f"üéì –§–∞–∫—É–ª—å—Ç–µ—Ç: –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ú–ì–£\n"
    settings_text += f"üìä –ö—É—Ä—Å: {user_info['course']}\n"
    settings_text += f"üë• –ì—Ä—É–ø–ø–∞: {user_info['group']}\n\n"
    settings_text += "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã\n"
    settings_text += "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞: 30 –º–∏–Ω –¥–æ –ø–∞—Ä—ã\n\n"
    settings_text += "_–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É_"
    
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='main')
    markup.add(btn)
    
    bot.edit_message_text(
        settings_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode='Markdown'
    )

def show_about(call):
    about_text = """
‚ÑπÔ∏è **–û –±–æ—Ç–µ:**

üéì **–ú–ì–£ –Æ—Ä—Ñ–∞–∫ –ü–æ–º–æ—â–Ω–∏–∫** - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —É—á–µ–±—ã –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ –ú–ì–£ –∏–º. –ú.–í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞.

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üìÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π
üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
üîî –£–º–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
üë®‚Äçüè´ –ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º
‚öôÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

**–í–µ—Ä—Å–∏—è:** 1.0.0
**–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è:** –°—Ç—É–¥–µ–Ω—Ç–æ–≤ —é—Ä—Ñ–∞–∫–∞ –ú–ì–£
**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @admin (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç)

üí° _–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ –ø–∞—Ä—ã –∏ –¥–µ–¥–ª–∞–π–Ω—ã, –∞ —Ç–∞–∫–∂–µ –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —É—á–µ–±–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π!_

üöÄ **–£–¥–∞—á–Ω–æ–π —É—á–µ–±—ã!**
    """
    
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', callback_data='main')
    markup.add(btn)
    
    bot.edit_message_text(
        about_text,
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup,
        parse_mode='Markdown'
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–æ—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
def keep_alive():
    while True:
        time.sleep(300)  # –°–ø–∏–º 5 –º–∏–Ω—É—Ç
        print("–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

if __name__ == '__main__':
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    keep_alive_thread = threading.Thread(target=keep_alive, daemon=True)
    keep_alive_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot.polling(none_stop=True, interval=0, timeout=60)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        time.sleep(5)
        bot.polling(none_stop=True)
